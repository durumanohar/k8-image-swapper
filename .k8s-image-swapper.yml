dryRun: true

logLevel: trace
logFormat: console

# imageSwapPolicy defines the mutation strategy used by the webhook.
# - always: Will always swap the image regardless of the image existence in the target registry.
#           This can result in pods ending in state ImagePullBack if images fail to be copied to the target registry.
# - exists: Only swaps the image if it exits in the target registry.
#           This can result in pods pulling images from the source registry, e.g. the first pod pulls
#           from source registry, subsequent pods pull from target registry.
imageSwapPolicy: exists

# imageCopyPolicy defines the image copy strategy used by the webhook.
# - delayed: Submits the copy job to a process queue and moves on.
# - immediate: Submits the copy job to a process queue and waits for it to finish (deadline 8s).
# - force: Attempts to immediately copy the image (deadline 8s).
imageCopyPolicy: delayed

source:
  # Filters provide control over what pods will be processed.
  # By default all pods will be processed. If a condition matches, the pod will NOT be processed.
  # For query language details see https://jmespath.org/
  filters:
    # Do not process if namespace equals "kube-system"
    - jmespath: "obj.metadata.namespace == 'kube-system'"

    # Only process if namespace equals "playground"
    #- jmespath: "obj.metadata.namespace != 'playground'"

    # Only process if namespace ends with "-dev"
    #- jmespath: "ends_with(obj.metadata.namespace,'-dev')"

#  registries:
#    dockerio:
#      username:
#      password:

target:
  type: aws
  aws:
    accountId: 123456789
    region: ap-southeast-2
    ecrOptions:
      tags:
        - key: CreatedBy
          value: k8s-image-swapper
      imageTagMutability: MUTABLE
      imageScanningConfiguration:
        imageScanOnPush: true
      encryptionConfiguration:
        encryptionType: AES256
        kmsKey: string
#    dockerio:
#    quayio:
